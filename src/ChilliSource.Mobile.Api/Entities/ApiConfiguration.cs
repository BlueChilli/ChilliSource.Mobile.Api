#region License

/*
Licensed to Blue Chilli Technology Pty Ltd and the contributors under the MIT License (the "License").
You may not use this file except in compliance with the License.
See the LICENSE file in the project root for more information.
*/

#endregion

using System;
using System.Net.Http;
using ChilliSource.Mobile.Core;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Serialization;

namespace ChilliSource.Mobile.Api
{
    /// <summary>
    /// Represents the API configuration, consisting of the API base URL, authentication token, 
    /// Json serialization settings, and handlers for session expiry and network connection loss
    /// </summary>
	public class ApiConfiguration
	{
        /// <summary>
        /// Initialises instance by setting properies to the provided paramters
        /// </summary>
        /// <param name="baseUrl"></param>
        /// <param name="httpHandlerFactory"></param>
        /// <param name="jsonSerializationSettingsFactory"></param>
        public ApiConfiguration(
            string baseUrl,
            Func<HttpMessageHandler> httpHandlerFactory,
            Func<JsonSerializerSettings> jsonSerializationSettingsFactory
            )
        {
            BaseUrl = baseUrl;
            JsonSerializationSettingsFactory = jsonSerializationSettingsFactory;
            HttpHandlerFactory = httpHandlerFactory;
        }

        /// <summary>
        /// Initialises instance by setting properties to the provided paramters 
        /// and using default Json serializer settings defined by <see cref="DefaultJsonSerializationSettingsFactory"/>
        /// </summary>
        /// <param name="baseUrl"></param>
        /// <param name="httpHandlerFactory"></param>
		public ApiConfiguration(
			string baseUrl,
			Func<HttpMessageHandler> httpHandlerFactory) :
		this(baseUrl, httpHandlerFactory, DefaultJsonSerializationSettingsFactory)
		{

		}
       
        /// <summary>
        /// Handler to be exectued when the API returns the 401 HTTP status code
        /// </summary>
		public Action<ServiceResult> OnSessionExpired { get; set; }
        
        /// <summary>
        /// Handler to be executed when there is no network connectivity at the time of an API call
        /// </summary>
		public Action<ServiceResult> OnNoNetworkConnectivity { get; set; }
        
        /// <summary>
        /// Function to return Json serializer settings
        /// </summary>
		public Func<JsonSerializerSettings> JsonSerializationSettingsFactory { get; }
        
        /// <summary>
        /// Function to create HTTP message handlers
        /// </summary>
		public Func<HttpMessageHandler> HttpHandlerFactory { get; }
        
        /// <summary>
        /// API base URL
        /// </summary>
		public string BaseUrl { get; }

        /// <summary>
        /// Returns a function that generates default Json serializer settings, specifying
        /// Utc time zone handling, Iso date format handling, default enum and Iso date converters, and a
        /// camel case property name contract resolver.
        /// </summary>
		public static Func<JsonSerializerSettings> DefaultJsonSerializationSettingsFactory = () =>
		{
			var settings = new JsonSerializerSettings()
			{
				ContractResolver = new CamelCasePropertyNamesContractResolver(),
				Converters = { new StringEnumConverter(), new IsoDateTimeConverter() },
				DateFormatHandling = DateFormatHandling.IsoDateFormat,
				DateTimeZoneHandling = DateTimeZoneHandling.Utc
			};

			return settings;
		};

        /// <summary>
        /// Returns the Json settings generated by the <see cref="JsonSerializationSettingsFactory"/>
        /// </summary>
		public JsonSerializerSettings JsonSerializationSettings
		{
			get
			{
				if (JsonSerializationSettingsFactory != null)
				{
					return JsonSerializationSettingsFactory.Invoke();
				}

				return DefaultJsonSerializationSettingsFactory.Invoke();
			}
		}
	}

}
